{"experiment_name": "One Shot - Mistral - N2C2 - JSON", "inputs": ["758638.txt.json", "701307.txt.json", "802249.txt.json", "156908.txt.json", "700421.txt.json", "333193.txt.json", "11995.txt.json", "150406.txt.json", "898277.txt.json", "811352.txt.json", "293045.txt.json", "565922.txt.json", "883682.txt.json", "744366.txt.json", "844334.txt.json", "699364.txt.json", "560453.txt.json", "975588.txt.json", "961115.txt.json", "359997.txt.json", "610966.txt.json", "633499.txt.json", "497131.txt.json", "661.txt.json", "993550.txt.json", "497321.txt.json", "716292.txt.json", "367177.txt.json", "403481.txt.json", "868962.txt.json", "904835.txt.json", "661928.txt.json", "159637.txt.json", "508921.txt.json", "818884.txt.json", "957953.txt.json", "921741.txt.json", "158995.txt.json", "942556.txt.json", "269404.txt.json", "66947.txt.json", "901540.txt.json", "483034.txt.json", "818404.txt.json", "652612.txt.json", "731937.txt.json", "948640.txt.json", "172366.txt.json", "5091.txt.json", "824987.txt.json", "924060.txt.json", "312933.txt.json", "869853.txt.json", "436461.txt.json", "893858.txt.json", "941312.txt.json", "874479.txt.json", "734280.txt.json", "858069.txt.json", "993109.txt.json", "915973.txt.json", "197702.txt.json", "573300.txt.json", "797772.txt.json", "496398.txt.json", "658896.txt.json", "995723.txt.json", "232166.txt.json", "498500.txt.json", "180337.txt.json", "182634.txt.json", "852130.txt.json", "417096.txt.json", "471570.txt.json", "817866.txt.json", "801284.txt.json", "983185.txt.json", "217805.txt.json", "280639.txt.json", "944118.txt.json", "881168.txt.json", "80815.txt.json", "549067.txt.json", "752897.txt.json", "28218.txt.json", "230210.txt.json", "133198.txt.json", "98718.txt.json", "614396.txt.json", "367173.txt.json", "940794.txt.json", "937042.txt.json", "910475.txt.json", "920102.txt.json", "449738.txt.json", "348094.txt.json"], "outputs": [], "pipeline": [{"name": "input text", "inputs": ""}, {"name": "step1", "model": "LLamaCppModel", "prompt": "<|im_start|>system\nEmulate a tool for the specified task. Strictly follow the provided instructions to execute the task accurately.\nYour role is to adhere solely to the given guidelines and perform the designated actions without deviation.<|im_end|>\n<|im_start|>user\nTASK: Named Entity Medical Extraction\nExtract all and only the medications from the document below.\nPut all the extracted entities into a json array with the keys chem_name, dosage, mode and frequency.\nIf no data in any of the keys write \"nm\".\nFollow a json format like this:\n{{\n    \"chem_name\": string,\n    \"dosage\": string,\n    \"mode\": string,\n    \"frequency\": string\n}}\n<|im_end|>\n<|im_start|>user\nHere below there are some examples of extractions:\n{examples}\n<|im_end|>\n<|im_start|>user\nDo the same for the document below:\n\n```document.txt\n{document}\n```\n<|im_end|>\n<|im_start|>assistant\n```medications.json", "params": {"temperature": 0.0, "mirostat_tau": 5.0, "n_predict": 4096, "mirostat": 2, "stop": ["###################", "USER", "ASSISTANT", "```"]}, "map_input": "def map_input(inputs: list = None):\n    chunks = inputs[0].output.value['chunks']\n    \n    examples = ''\n    for i,chunk in enumerate(chunks):\n        examples += '``` example' + str(i+1) + '.txt\\n'\n        examples += chunk['text'] + '\\n'\n        examples += '```\\n'\n        examples += '``` example' + str(i+1) + '.csv\\n'\n        examples += 'chem_name;dosage;mode;frequency\\n'\n        for ann in chunk['annotations']:\n            examples += ';'.join([value for value in list(ann.values())[:4]]) + '\\n'\n        examples += '```\\n---\\n'\n    return {'examples': examples, 'document': inputs[0].output.value['document']}\n", "map_output": "def map_output(output):\n    output = output.replace('<dummy32000>', '')\n    if not output.endswith('<|im_end|>'):\n        output += '<|im_end|>'\n    return output\n", "inputs": "input text"}, {"name": "to json", "inputs": "step1"}]}